---
layout: default
title: Introduction to Passion.Actor
short_title: Introduction
category: passion.Actor
permalink: /passion.Actor/index.html
---

Actors are the essential building blocks for games done with PÄSSION.

They represent the game's "entities". They can be as simple as "particle effects" or as complex as enemies with behaviours.

PÄSSION provides a great deal of functionality as a base, but enforces only a bare minimum. It is up to you to decide how much of that functionality you want to use.

In order to define an actor, you must subclass the passion.Actor class:

{% highlight lua %}
Enemy = class('Enemy', passion.Actor)
{% endhighlight %}

Here are passion.Actor's main characteristics:

* Actors have states. So it is possible to generate an Enemy with a "Thinking state" and a "fighting state". This is implemented via MiddleClass.
* Actors have update() and draw() methods. These methods are empty by default. Modifying them is the easiest way to alter how an Actor behaves / looks like. These functions can be redefined depending on the actor's state.
* Actors have a built-in camera system
* Actors have built-in parenting (but they don't use it)
* Actors have "frezzing" and "invisibility" capabilities. These include the definition of two default states: frozen and invisible. These states are stackable.






