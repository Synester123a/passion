---
layout: tutorial
tutorial: oop-and-you
title: @MiddleClass@
basename: middleclass
---

h3. A tale from grandpa ( %(small)I promise to keep it short% )

You may probably have noticed that there's a lot of repetition in videogames. The first example that comes to my mind are the enemies of any shoot-them up; at the end of any of those, you can have obliterated 10000 individual ships, but in reality you have only faced 10 or 20 different ship designs.

Even classical games have this: the Goombas and Koopa Troopas were all really the same enemy.

This repetition is actually quite common on the computer software in general; administrative software has to deal with repetitive "structures" such as "clients" or "sales".

But we're not here to speak about boring clients or sales, but about repetition.

One of the key aspects of computing is learning how to deal efficiently with repetitive structures.

Object-oriented programming acknowledges that repetition, and provides standarized ways to organize data around it.

Lua doesn't have built-in object orientation, but it provides several mechanisms to build it.

MiddleClass is my personal attempt at building an Object-oriented system on top of Lua.

In other words; It's my attempt at helping you make lots of clones, easily and elegantly.

h3. Attack of the clones

Consider the following code:

{% highlight lua linenos %}
require 'MiddleClass.lua'

Person = class('Person')
function Person:initialize(name, strength)
  self.name = name
  self.strength = strength
end
function Person:attack(other)
  print(self.name .. ' attacks ' .. other.name)
  if(self.strength > other.strength) then
    print('Attack succeeded!')
  else
    print(self.name .. ' blocked the attack!')
  end
end

local yoda = Person:new('Yoda', 1000)
local luke = Person:new('Luke', 20)

luke:attack(yoda)
yoda:attack(luke)
{% endhighlight %}

This program outputs the following lines on the console (you might have to activate it, if you are on windows):

{% highlight text %}
(Luke attacks Yoda)
Yoda blocked the attack!
(Yoda attacks Luke)
Attack succeeded!
{% endhighlight %}


Ha! I've managed to print *4 lines* using only 22 lines of code! And _3 of them were even blank_.

Wait! Come back! There's a *reason* for all this!

Consider what you would do if instead of creating just one yoda and luke, you needed to create an _Army of Clones_.

_And make them fight each other_.

Let's do it!:

{% highlight lua linenos %}
require 'MiddleClass.lua'

Person = class('Person')
function Person:initialize(name, strength)
  self.name = name
  self.strength = strength
end
function Person:attack(other)
  print(self.name .. ' attacks ' .. other.name)
  if(self.strength > other.strength) then
    print('Attack succeeded!')
  else
    print(self.name .. ' blocked the attack!')
  end
end

local numberOfClones = 100
local numberOfAttacks = 10

-- create the clones
local clones = {}
for i=0, numberOfClones do
  clones[i] = Person:new('Clone ' .. tostring(i), math.random(100))
end

-- make them fight - chose two randomly, one attacks the other
for i=0, numberOfAttacks do
  local clone1 = clones[math.random(numberOfClones)]
  local clone2 = clones[math.random(numberOfClones)]
  clone1:attack(clone2)
end
{% endhighlight %}

Output (will vary, it is random):

{% highlight text %}
(Clone 13 attacks Clone 4)
Clone 4 blocked the attack!
(Clone 29 attacks Clone 50)
Attack succeeded!
(Clone 75 attacks Clone 15)
Attack succeeded!
(Clone 28 attacks Clone 16)
Attack succeeded!
(Clone 13 attacks Clone 4)
Clone 4 blocked the attack!
...
{% endhighlight %}

I hope you are starting to see where all this goes!








