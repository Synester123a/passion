---
layout: default
title: Update and draw methods
---

Here's how you customize the update and draw methods of an Actor:

{% highlight lua linenos %}
-- file main.lua
-- draws a parrot that moves from left to right

require('passion/init.lua')

-- assumes there's an image/parrot.png file
local image = passion.graphics.getImage('images/parrot.png')

Parrot = class('Parrot', passion.Actor)

function Parrot:initialize(image)
  super.initialize(self)
  self:setPosition(100,100)
  self.image = image
end

function Parrot:update(dt)
  local x,y = self:getPosition()
  self:setPosition(x+dt,y)
end

function Parrot:draw()
  love.graphics.draw(self.image, self:getPosition())
end

parrot = Parrot:new()
{% endhighlight %}

Let me comment out the code.

* On line 4 we include passion - callbacks are set up, and the environment is prepared.
* On line 7 an image is loaded using passion.graphics.getImage
* On line 9 the new Parrot class is declared
* Lines 11-15 define the class constructor. Note that the parrot will initially be positioned on 100,100. The setPosition method is provided by passion.Actor.
* Lines 17-20 define how the parrot changes over time. On this case, x simply never stops increasing. This function will be automatically called by PÄSSION each time the love.update function is invoked.
* Lines 22-24 simply show the image on the actor's position. It should be clear enough for LÖVE practitioners.
* The last line created a parrot.

What? You don't have a parrot image? Here you go:

p=. !{{ site.root_path }}/images/parrot.png!


Let's move on to the next thing.
